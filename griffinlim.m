function [y, D] = griffinlim(X, numIters, overlap, initrand)
% Max Henry
% Final Project for MUMT 605
% Digital Sound Synthesis and Audio Processing
% Prof. Philippe Depalle
%
% Implementation of the Griffin and Lim algorithm (1984) for phase reconstruction.
%
% Accepts magnitude-only STFT X (expecting spectral frames that are 2x's
% zero-padded, as generated by stft.m).  Will iterate for 'numIters'
% iterations.  Suggested/default synthesis 'overlap' is 4 (i.e. hop size is
% 1/4th of the expected window size).  Setting 'initrand' to a nonzero
% value will use random phase (rather than 0 phase) for the first iteration
% of synthesis.  This is off by default.
% 
% Based on the algorithm developed by Griffin and Lim:
% D. Griffin and J. Lim. Signal estimation from modified short-time
%     Fourier transform. IEEE Trans. Acoust. Speech Signal Process.,
%     32(2):236-243, 1984.

% This code is heavily indebted to Malcolm Slaney's
% InvertSpectrogram.m

if nargin < 4
    initrand = 0;
end

[r ~] = size(X);
L = r/2;

window = glimwin(L, overlap);       % generate window whose square OL-adds to unity

if nargin < 2
    numIters = 100;
    disp('Default num iterations: 100');
end
if nargin < 3
    overlap = 4;
    disp(['Default overlap factor: ' num2str(overlap)]);
end

hop = floor(L/overlap);
epsilon = 1/1e8;                % a very small number
D = zeros(1, numIters);         % to track minimization progress
goalMag = abs(X);               % goal spectrogram

updateX = abs(X);                % first spectra for iteration

% synthesis loop
for iter = (1:numIters)
    xhat = LSEEMSTFT(updateX, window, hop, iter, initrand); % generate signal estimate
    Xhat = stft(xhat, window, hop);                         % calculate stft
    
    phaseupdate = Xhat ./ max(abs(Xhat), epsilon);          % prevent division by zero
    
    D(iter) = sum(sum(abs(goalMag - abs(Xhat))));           % calculate distance measure
    
    updateX = goalMag .* phaseupdate;
end

y = LSEEMSTFT(Xhat, window, hop);    % generate final signal
y(isnan(y)) = 0;                    % remove NaNs

end